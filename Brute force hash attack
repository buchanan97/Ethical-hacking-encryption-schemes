import hashlib

def generate_hashes():
    # Target hashes
    target_hashes = {
        "0x31E6FA527BC58FDF6364171EF88C4C4113AF477A7080D9BD1DF80DFD95DB6444", #holds the hash values of all 7 
        "0x0830A9FD576AB33C711676C7570A61900A78C0075B60758763741CC0B9BACDE8",
        "0xD317C47574BBC4474DAF8AC434441124AFD91787F97E675489E19576CEE120C3",
        "0xD44A23EAA47C394CEE807715462B914EBD25E9D9E462DFA0A9FFEEE436792D2F",
        "0x0EA27E5484071807E3B7D51CC40717F36E64B4A1B4756FC463307EA1A9B26345",
        "0x4DBA0032E8E9E071325ED5002235686896D6739A32E03DAA29232146F01F894F"
    }

    letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" #Holds the letters from A to Z
    digits = "0123456789" #Holds the numerical values from 0 to 9 in order since this will be generated in the nested loop

    # Generate all possible plates in the format LLL-NNNN
    for l1 in letters: 
        for l2 in letters:
            for l3 in letters:
                for d1 in digits:
                    for d2 in digits:
                        for d3 in digits:
                            for d4 in digits:
                                plate = f"{l1}{l2}{l3}-{d1}{d2}{d3}{d4}" #setting the plate values in the format needed
                                hash_object = hashlib.sha256(plate.encode()) #using the python library dot notation to append the sha256 prinicapels to encode the hash
                                hash_hex = "0x" + hash_object.hexdigest().upper() #setting the chartacters to uppercase principles
                                if hash_hex in target_hashes: #computation finds the hash hex then it will print out the corresponding value.
                                    print(f"Match found: {plate} -> {hash_hex}")

if __name__ == "__main__": #
    generate_hashes() 
